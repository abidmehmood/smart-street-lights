-- component is deployed on each lamppost. --
-- It only sends and receives probe messages to other lampposts in close vicinity. --
-- In case a peer fails to respond to a probe message, it generates a warning --
-- Admins need to check the logs to determine which lamppost failed to respond -- 
package sslights::processing::peer_check
public
	with sslights::datatypes;
	
	process peer_check
		features 
			msg_in : in data port sslights::datatypes::probe_msg; 
			msg_out : out data port sslights::datatypes::probe_msg;
			warning : out event port; 
		flows 
			f0 : flow path msg_in -> msg_out;
	end peer_check;
	
	process implementation peer_check.i
		subcomponents 
			thr : thread peer_check_thr.i;
		connections
			c0 : port msg_in -> thr.msg_in;
			c1 : port thr.msg_out -> msg_out;
		flows 
			f0 : flow path msg_in -> c0 -> thr.f0 -> c1 -> msg_out;
	end peer_check.i;
	
	thread peer_check_thr
		features
			msg_in : in data port sslights::datatypes::probe_msg; 
			msg_out : out data port sslights::datatypes::probe_msg;
			warning : out event port;
		flows 
			f0 : flow path msg_in -> msg_out;
		properties
			Dispatch_Protocol => Periodic;
			Period => 5000ms;
	end peer_check_thr;
	
	thread implementation peer_check_thr.i		
	end peer_check_thr.i;
	
end sslights::processing::peer_check;