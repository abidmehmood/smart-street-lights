package sslights::integration
public
	--- This will now implement the functional flow of the system as described in the paper --
	with sslights::sensing;

	with sslights::processing::image_input;

	with sslights::processing::object_detection;

	with sslights::processing::speed_assessor;

	with sslights::processing::distance_calc;

	with sslights::processing::sphere_clincher;

	with sslights::processing::peer_check;

	with sslights::processing::lamppost_controller;

	with sslights::actuating;

	with sslights::platform;

	system integration
	--features
	end integration;

--  This is the functional system. This system is designed to be independent 
--  of the underlying deployment platform. It contains all components
--  without associating connections or processes to processors.
--
--  The association to an execution platform is done later, in the
--  system implementation integration.variation1 and integration.variation2
--
	system implementation integration.functional
		subcomponents
--- input (sensing) devices
			detection_camera: device sslights::sensing::detection_camera;
			object_radar: device sslights::sensing::object_radar;
			laser_motion_sensor: device sslights::sensing::laser_motion_sensor;
--- processing (software) components 
			image_input: process sslights::processing::image_input::image_input.i;
			object_detection: process sslights::processing::object_detection::object_detection.i;
			speed_assessor: process sslights::processing::speed_assessor::speed_assessor.i;
			distance_calc: process sslights::processing::distance_calc::distance_calc.i;
			sphere_clincher: process sslights::processing::sphere_clincher::sphere_clincher.i;
			peer_check: process sslights::processing::peer_check::peer_check.i;
			lamppost_controller: process sslights::processing::lamppost_controller::lamppost_controller.i;
--- output (actuating) devices 
			light_ctrl: device sslights::actuating::light_ctrl;
		connections
			c00: port detection_camera.raw_image -> image_input.raw_image;
			c01: port detection_camera.raw_image -> object_detection.raw_image;
			c03: port laser_motion_sensor.speed -> speed_assessor.speed_estimate;
			c04: port speed_assessor.speed -> sphere_clincher.speed;
			c05: port object_detection.distance_estimate -> distance_calc.distance_estimate;
			c06: port speed_assessor.speed -> sphere_clincher.speed;
			c07: port distance_calc.distance -> sphere_clincher.distance;
			c08: port sphere_clincher.lp_ids -> lamppost_controller.lp_ids;
			c09: port sphere_clincher.act_type -> lamppost_controller.act_type;
			c10: port peer_check.msg_out -> peer_check.msg_in;
			c11: port lamppost_controller.color_cmd -> light_ctrl.color_cmd;
			c12: port lamppost_controller.intensity_cmd -> light_ctrl.intensity_cmd;
				-- note the end to end flows are to be used for a specific purpose e.g. to ensure the latency requirements. e.g. from an object detection to
				-- setting of the light how long it may take at the max.
				-- we can have more than one instances per one flow. e.g. after object detection we may follow the flow using object_detection or laser_motion_sensor
				-- and similarly after that we may take the flow along distance_calc or speed_assessor and after that may take for lp_ids or act_type in sphere_clincher 
				-- I have given only one flow in the following. 
		flows
			object_detection_to_color_set: end to end flow detection_camera.f0 -> c01 -> object_detection.f0 -> c05 -> distance_calc.f0 -> c07 -> sphere_clincher.f1 -> c08 -> lamppost_controller.f00 -> c11 -> light_ctrl.f0;
	end integration.functional;

--- Next we define a deployment strategy for the system. Note we define only one strategy but we can have variations here as all our functions are critical. 
--  So we deploy all functions (process and device components) on the same platform elements (processor and bus components) and allow sharing execution resources. 
--
--  For deployment, we are using
--    * one processor for all software
--    * two buses to connect the devices to the processor
--      one for the input, one for the output
--

	system implementation integration.strategy1 extends integration.functional
		subcomponents 
			cpu : processor sslights::platform::ecu;
			can1 : bus sslights::platform::can; 
			can2 : bus sslights::platform::can; 
		connections 
			b00 : bus access can1 <-> cpu.socket1; 
			b01 : bus access can2 <-> cpu.socket2; 
		properties 
			
			actual_processor_binding => (reference (cpu)) applies to image_input, object_detection, speed_assessor, distance_calc, sphere_clincher, peer_check, 
			                                                         lamppost_controller; 
			
			actual_connection_binding => (reference (can1)) applies to c00, c01, c03, c10, c11, c12;
			
			actual_connection_binding => (reference (can2)) applies to c04, c05, c06, c07, c08, c09;
			  
	end integration.strategy1;
	
	annex reconfiguration {**
		aspect LamppostFailure {
		-- pointcut should select all cases where flag is generated by peer_check --
		    pointcut InitiateRepair (postInfo:String_Type) : execution sslights::processing::peer_check.warning (* (..));
		    pointcut ReconfigureSystem (postInfo:String_Type) : execution sslights::processing::peer_check.warning (* (..));  	
		
		    advice before(postInfo:String_Type) : InitiateRepair(postInfo) {
			   postRepairCall! (this.value, postInfo);
		    }
		
		    advice before(postInfo:String_Type) : ReconfigureSystem(postInfo) {
			   alertCarNavigation! (this.value, postInfo);
		    }
		}
	**};
	
	
end sslights::integration;